/*
Pentagonal numbers are generated by the formula, 
  
  P_n=n(3n−1)/2. 

The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P_4 + P_7 = 22 + 70 = 92 = P_8. However, their difference, 
70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, P_j and P_k, for which 
their sum and difference are pentagonal and D = |Pk − Pj| is minimised; 
what is the value of D?
*/

// NOTE: only found 1 value for n = 10,000, just assumed it was the right answer, 
// don't actually know if it is minimized (maybe it is because P'(n) is
// monotonically increasing for n > 1?)


// Quadratic formula: (-b +/- sqrt(b^2 - 4*a*c)) / 2*a
// For arbitrary integer p, determine if p is pentagonal:
// p = (3n^2 - n)/2
// => 3n^2 - n - 2p = 0
// => p must be an integer s.t. -1 + sqrt(1 + 24p) / 6 is an integer.
// <=> sqrt(1+24p) - 5 % 6 == 0

// => p pentagonal if sqrt(1 + 24p) % 6 == 5 
var isPentagonal = function(p, epsilon) {
  epsilon = epsilon || 0
  return (Math.sqrt(1 + 24 * p) - 5) % 6 <= epsilon;
}

var testPentagonals = [1,5,12,22,35,51,70,92,117,145];
var testNonPentagonals = [2,4,100,144,143,142,141,140,139];
console.log("Does isPentagonal work? " + testPentagonals.every(function(p) {
  return isPentagonal(p);
}) + " " + testNonPentagonals.every(function(p) {
  return !isPentagonal(p);
}));

var pentagonal = function(n) {
  return (3*n*n - n) / 2;
}

var pairs = [];
var limit = 10000; // generate 10000 pentagonal numbers
for (var i=1; i<=limit; i++) {
  for (var j=i+1; j<=limit; j++) {
    var a = pentagonal(i);
    var b = pentagonal(j);
    if (isPentagonal(b - a) && isPentagonal(b + a)) {
      pairs.push([i,j]);
    }
  }
}
console.log(pairs)
console.log("The differences: ")
console.log(pairs.map(function(pair) {
  return pentagonal(pair[1]) - pentagonal(pair[0]);
}));

